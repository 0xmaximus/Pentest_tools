import time
import requests
import hashlib
import json
import base64


import base64

def compute_response_hash(response):
    """Compute the base64 encoding of a HTTP response body and headers."""
    # Encode the response body
    body_encoded = base64.b64encode(response.text.encode())
    headers_encoded = base64.b64encode(str(response.status_code).encode())
    response_encoded = [headers_encoded, headers_encoded]
    return response_encoded

def send_message_to_discord(response_encoded, webhook_url):
    """Send a message to Discord with the details of the changes."""
    message = {
        "content": response_encoded
    }
    requests.post(webhook_url, data=json.dumps(message), headers={"Content-Type": "application/json"})
    
    
def compare_responses(initial_response, new_response, domain):
    """Compare two HTTP responses and return a message describing the changes."""
    # message = "The response has changed:\n"
    # Compare the status codes
    if initial_response.status_code != new_response.status_code:
        message = f"==============\n[+] Target: {domain}\n - Status code changed from {initial_response.status_code} to {new_response.status_code}\n==============\n"
        return message
    
    # Compare the bodies
    elif initial_response.text != new_response.text:
        message = " - Body changed:\n"
        lines1 = initial_response.text.splitlines()
        lines2 = new_response.text.splitlines()
        
        # Zip the lines together and compare them
        for line1, line2 in zip(lines1, lines2):
            if line1 != line2:
                difference_b = (f"{line1} != {line2}")
                difference = f"==============\n[+] Target: {domain}\n - Body changed:\n {difference_b} \n==============\n"
                return difference


def watch_tower(domains_file, interval, webhook_url):
    """Monitor a list of domains and send a message to Discord if the response changes."""
    # Read the list of domains from the file
    with open(domains_file, "r") as f:
        domains = [line.strip() for line in f]
    
    # Initialize a dictionary to store the initial responses
    initial_responses = {}

    # Compute the initial responses
    for domain in domains:
        try:
            response = requests.get(domain)
            initial_responses[domain] = response
        except requests.exceptions.RequestException as e:
            print(f'{domain} is not accessible')
            send_message_to_discord(f"{domain} is not accessible", webhook_url)
            initial_responses[domain] = None
    send_message_to_discord(f"initial responses finished", webhook_url)
    time.sleep(10)
    while True:
        # Sleep for the specified interval
        time.sleep(interval)
        
        # Check the responses of the domains
        for domain in domains:
            try:
                new_response = requests.get(domain)
                if initial_responses[domain] is None:
                    initial_responses[domain] = new_response
                    print(f'{domain} is now accessible')
                    send_message_to_discord(f"{domain} is now accessible", webhook_url)
                    continue
                if new_response.status_code != initial_responses[domain].status_code or new_response.text != initial_responses[domain].text:
                    message = compare_responses(initial_responses[domain], new_response, domain)
                    send_message_to_discord(message, webhook_url)
                initial_responses[domain] = new_response
            except requests.exceptions.RequestException as e:
                if initial_responses[domain]:
                    print(f'{domain} is not accessible')
                initial_responses[domain] = None



                
# Parse the input parameters
import sys
domains_file = sys.argv[1]
interval = int(sys.argv[2])
webhook_url = sys.argv[3]

# Start the "watch tower"
watch_tower(domains_file, interval, webhook_url)
